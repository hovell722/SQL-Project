--1.1	Write a query that lists all Customers in either Paris or London. Include Customer ID, Company Name and all address fields.

SELECT CustomerID, CompanyName, [Address], PostalCode, City
FROM Customers 
WHERE City = 'London' OR City = 'Paris';  

--1.2	List all products stored in bottles.

SELECT ProductName
FROM Products
WHERE QuantityPerUnit LIKE '%bottle%';    -- selects anything within QuantityPerUnit with the word bottle in --

--1.3	Repeat question above, but add in the Supplier Name and Country.

SELECT p.ProductName, s.CompanyName AS "Supplier Name", s.Country
FROM Products p
INNER JOIN Suppliers s  -- Had to join suppliers table to get Supplier Name and Country --
ON s.SupplierID = p.SupplierID
WHERE p.QuantityPerUnit LIKE '%bottle%';

--1.4	Write an SQL Statement that shows how many products there are in each category. Include Category Name in result set and list the highest number first.

SELECT c.CategoryID, c.CategoryName AS "Category Name", SUM(p.CategoryID) AS "No. of products in category"
FROM Products p
INNER JOIN Categories c  -- Sum the CategoryID to get the number of products in each category --
ON p.CategoryID = c.CategoryID 
GROUP BY c.CategoryID, c.CategoryName ORDER BY SUM(p.CategoryID) DESC;

--1.5	List all UK employees using concatenation to join their title of courtesy, first name and last name together. Also include their city of residence.

SELECT CONCAT(TitleOfCourtesy, ' ', FirstName, ' ', LastName) AS "Employee Full Title", City
FROM Employees;   -- CONCAT allows the linking of columns --

--1.6	List Sales Totals for all Sales Regions (via the Territories table using 4 joins) with a Sales Total greater than 1,000,000. Use rounding or FORMAT to present the numbers. 

SELECT r.RegionID, r.RegionDescription , ROUND(SUM(od.UnitPrice * od.Quantity * (1-od.Discount)), 0) AS 'Sales Total'
FROM Region r
INNER JOIN Territories t ON r.RegionID = t.RegionID
INNER JOIN EmployeeTerritories et ON t.TerritoryID = et.TerritoryID  -- Need to INNER JOIN 5 tables so you can get RegionID and Sales Total --
INNER JOIN Orders o ON et.EmployeeID = o.EmployeeID
INNER JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY r.RegionID, r.RegionDescription HAVING ROUND(SUM(od.UnitPrice * od.Quantity * (1-od.Discount)), 0) > 1000000
ORDER BY r.RegionID; -- Must be over 1000000 -- 

--1.7	Count how many Orders have a Freight amount greater than 100.00 and either USA or UK as Ship Country.

SELECT COUNT(OrderID) AS "No. Orders UK/USA and freight above 100"
FROM Orders
WHERE (ShipCountry = 'UK' OR ShipCountry = 'USA') AND (Freight > 100.00); -- Brackets needed otherwise will give wrong results --

--1.8	Write an SQL Statement to identify the Order Number of the Order with the highest amount of discount applied to that order.

SELECT TOP 1 OrderID, UnitPrice * Quantity * Discount AS "Discounted Amount" -- There were 2 orders with 2108 discount amount, so I put TOP 1 --
FROM [Order Details]
GROUP BY OrderID, (UnitPrice * Quantity * Discount) -- Formula for dicounted amount --
HAVING (UnitPrice * Quantity * Discount) = (SELECT MAX(UnitPrice * Quantity * Discount) FROM [Order Details]) -- Selects MAX discount --
ORDER BY MAX(UnitPrice * Quantity * Discount) DESC; 

-- 2.1 Write the correct SQL statement to create the following table:
/* Spartans Table â€“ include details about all the Spartans on this course. Separate Title,
First Name and Last Name into separate columns, and include University attended,
course taken and mark achieved. Add any other columns you feel would be appropriate. */

DROP TABLE spartans_table;

CREATE TABLE spartans_table(
    sparta_id INT IDENTITY(1, 1),
    title VARCHAR(5) NOT NULL,
    first_name VARCHAR (10) NOT NULL,
    last_name VARCHAR (10) NOT NULL,
    age INT, -- added as an extra. INT because its a number value --
    university VARCHAR (50),  
    course_taken VARCHAR (50),
    course_level VARCHAR (10), -- added to clarify level of degree --
    mark VARCHAR (5),
    PRIMARY KEY(sparta_id)
);

-- IMPORTANT NOTE: For data protection reasons do NOT include date of birth in this exercise.
-- 2.2 Write SQL statements to add the details of the Spartans in your course to the table you have created.

INSERT INTO spartans_table(
    title, first_name, last_name, age, university, course_taken, course_level, mark
)
VALUES
('Mr.', 'Mahan', 'Jahromi', 23, 'University of Portsmouth', 'Mathematics', 'Bachelors', '2:1'),
('Mr.', 'Elliot', 'Harris', 23, 'Canterbury Chirst Church', 'History', 'Bachelors', '2:2'),
('Dr.', 'Ayman', 'Yousfi', 23, 'University of West London', 'Computer Science', 'Bachelors', '2:1'),
('Mr.', 'Zack', 'Davenport', 24, 'University of East Anglia', 'Film and Television', 'Bachelors', '2:2'),
('Mr.', 'Abdullah', 'Ayyaz', 25, 'University of Westminster', 'Business Economics', 'Bachelors', '2:1'),
('Mr.', 'Kevin', 'Monteiro', 23, 'Cass Business School', 'Mathematical Trading and Finance', 'Masters', 'PASS'),
('Mr.', 'Adam', 'Moussa', 21, 'University of Sussex', 'Computer Science', 'Bachelors', '1:1'),
('Mr.', 'Ash', 'Isbitt', 21, 'University of Brunel', 'Visual Effects and Motion Graphics', 'Bachelors', '2:1'),
('Miss.', 'Sara', 'Abdruba', 26, 'University of Westminster', 'Computer Networks with Security', 'Masters', 'MERIT'),
('Mr.', 'Victor', 'Sibanda', 23, 'University of Lincoln', 'Electrical Engineering', 'Bachelors', '1:1'),
('Mr.', 'Camile', 'Malungu', 25, 'University of Brunel', 'Computer Science', 'Bachelors', '2:2'),
('Mr.', 'Maksaud', 'Ahmed', 21, NULL, NULL, NULL, NULL), -- Didn't go to university, so had to put NULL in the columns related to it --
('Mr.', 'Mohammed', 'Uddin', 22, 'University of Greenwich', 'Computer Science', 'Bachelors', 'PASS'),
('Mr.', 'James', 'Hovell', 24, 'University of Portsmouth', 'Mathematics', 'Bachelors', '2:1')
;

-- Write SQL statements to extract the data required for the following charts (create these in Excel):
-- 3.1 List all Employees from the Employees table and who they report to. No Excel required. (5 Marks)

SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS "Employee Name", CONCAT(s.FirstName, ' ', s.LastName) AS "Reports To" 
FROM Employees e 
INNER JOIN Employees s ON s.EmployeeID = e.ReportsTo; -- ReportsTo values correlate with EmployeeID so INNER JOIN would allow me to name them --

/* 3.2 List all Suppliers with total sales over $10,000 in the Order Details table.
Include the Company Name from the Suppliers Table and present as a bar chart as below: (5 Marks) */

SELECT s.CompanyName AS 'Company Name', SUM(od.UnitPrice * od.Quantity * (1-od.Discount)) AS 'Total Sales'
FROM Suppliers s
INNER JOIN Products p ON s.SupplierID = p.SupplierID -- needed to link Suppliers table to Order Details --
INNER JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY s.CompanyName HAVING SUM(od.UnitPrice * od.Quantity * (1-od.Discount)) > 10000; -- Sales total for each supplier must be over 100000 --

/* 3.3 List the Top 10 Customers YTD for the latest year in the Orders file.
 Based on total value of orders shipped. No Excel required. (10 Marks) */

SELECT TOP 10 c.CompanyName AS 'Company Name',  -- only looking for top 10 --
ROUND(SUM(od.UnitPrice * od.Quantity * (1-od.Discount)), 2) AS 'Total Sales',
YEAR(o.ShippedDate) AS 'Order Year'
FROM Orders o -- need Order Details, Orders and Customers tables linked
INNER JOIN [Order Details] od ON o.OrderID = od.OrderID
INNER JOIN Customers c ON c.CustomerID = o.CustomerID
GROUP BY c.CompanyName, YEAR(ShippedDate) 
HAVING YEAR(ShippedDate) = (SELECT YEAR(MAX(ShippedDate)) FROM Orders)  -- Selects the latest shipping year --
ORDER BY ROUND(SUM(UnitPrice * Quantity * (1-Discount)), 2) DESC;

-- 3.4 Plot the Average Ship Time by month for all data in the Orders Table using a line chart as below. (10 Marks)

SELECT MONTH(ShippedDate) AS 'Month', AVG(DATEDIFF(DD,OrderDate,ShippedDate)) AS 'Avg. Ship Time (days)'
FROM Orders -- calculates average days between OrderDate and ShippedDate --
GROUP BY MONTH(ShippedDate) -- Groups each month together. Each month is given their numeric value, (Jan = 1, Feb = 2, etc.) --
HAVING AVG(DATEDIFF(DD,OrderDate,ShippedDate)) IS NOT NULL -- ignores null values --
ORDER BY MONTH(ShippedDate);